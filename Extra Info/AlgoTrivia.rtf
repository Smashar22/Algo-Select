{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Inserting items to an already sorted array:
\b0 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 I have used the {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Insertion_sort"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 Insertion sort}} algorithm effectively for this issue. At one time we had a performance issue with a hash table object, I wrote a new object that used binary search instead that increased performance significantly. To keep the list sorted it would keep track of the number of items added since the last sort (i.e. number of unsorted items,) when the list needed to be sorted due to a search request, it performed an insertion sort or a quick sort depending on the percentage of items unsorted. Use of the insertion sort was key in improving the performance.\
\
Conclusion: Binary Search then Insertion Sort.\
\
\

\b Favourite Data Structures: Arrays - Hash Tables - Binary Search Trees
\b0 \
Arrays give you O(1) accesses (random access), but insertions and deletions might cost. \
A hash table could have O(1) insertions & deletions, accesses would cost.\
BST is useful for sorting keys, and comparingnearby keys.\
\
\

\b Why quicksort is more popular than radix-sort?
\b0 \
\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf2 1. Quicksort/Introsort is more flexible: \
Quicksort and Introsort work well with all kinds of data. All you need for sorting is the possibility to compare items. This is trivial with numbers but you can sort other data as well.\
Radix sort on the other hand just sorts things by their binary representation. It never compares items against each other. \
2. Radix sort needs more memory.\
}